<div id="scp_canvas"></div>

<script type="module">
    import * as THREE from '/node_modules/three';
    import { GLTFLoader } from '/node_modules/three/examples/jsm/loaders/GLTFLoader.js';
    import { OrbitControls } from '/node_modules/three/examples/jsm/controls/OrbitControls.js';
    let scpModel = null;
    let renderer = null
    let controls = null
    
    const canvasContainer = document.getElementById('scp_canvas')
    let height = canvasContainer.clientHeight
    let width = canvasContainer.clientWidth
    
    const scene = new THREE.Scene();
    const camera = setCamera();
    scene.add(camera);
    setModel();
    setRenderer();

    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);


    //Listener de reposicionamiento del canvas
    window.addEventListener('resize', () => {
        height = canvasContainer.clientHeight
        width = canvasContainer.clientWidth

        camera.aspect = width/height;
        camera.updateProjectionMatrix();
        renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);
    });


    function setCamera() {
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10);
        camera.position.z = -3.5;
        camera.lookAt(0, 0, 0);

        return camera;
    }

    function setRenderer() {
        renderer = new THREE.WebGLRenderer();

        renderer.domElement.addEventListener('mouseenter', () => renderer.domElement.style.cursor = 'move');
        renderer.shadowMap.enabled = true;

        renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);
        canvasContainer.appendChild(renderer.domElement);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))
        renderer.setClearColor(0x000000, 0);
        renderer.render(scene, camera);
        setControls();

        //Funcion en loop que se ejecutara para renderizar cada frame
        function animate() {
            requestAnimationFrame(animate);
            //modelAnimation()
            controls.update();
            renderer.render(scene, camera);
        }
        animate();
    }

    function setModel() {
        const loader = new GLTFLoader();
        loader.load('../../public/models/scp_logo.glb', (gltf) => {
            gltf.scene.traverse((child) => {
                if(child.isMesh) {
                    child.castShadow = true;
                    child.receiveShadow = true;
                }
            })
            gltf.scene.position.set(0, 0, 0);
            gltf.scene.castShadow=true;
            gltf.scene.receiveShadow=true;

            scpModel = gltf.scene;
            
            scene.add(gltf.scene);
        
        }),undefined,
        (error) => {
            console.error(error);
        }
    }

    function setControls() {
        controls = new OrbitControls(camera, renderer.domElement);
        controls.autoRotate = true;
        controls.autoRotateSpeed = 2;
        controls.enableDamping = true;
        controls.enablePan = false;
        controls.enableZoom = false;
    }

</script>

<style>
    #scp_canvas {
        width: 100%;
        height: 100%;
        background-color: transparent;
        padding: 10px;
    }
</style>
